{"version":3,"sources":["assets/images/beth.png","assets/images/birdperson.png","assets/images/evilmorty.png","assets/images/gianthead.png","assets/images/goldenford.png","assets/images/jerry.png","assets/images/jessica.png","assets/images/meeseeks.png","assets/images/morty.png","assets/images/mr.png","assets/images/rick.png","assets/images/summer.png","components/navbar/index.js","components/wrapper/index.js","components/jumbotron/index.js","components/character/index.js","components/container/index.js","components/footer/index.js","assets/javascript/images.js","App.js","index.js"],"names":["module","exports","Navbar","props","className","navMsgColor","navMsg","score","highscore","Wrapper","children","Jumbotron","Character","onClick","e","clickEvt","target","src","name","alt","Container","shake","characters","map","a","i","key","Footer","images","beth","birdperson","evilmorty","gianthead","goldenford","jerry","jessica","meeseeks","morty","mr","rick","summer","App","state","allCharacters","randomArray","clickedCharacters","clickCheck","bind","newCharacterArray","slice","randomArr","length","push","splice","Math","floor","random","clickedElem","prevClickedCharacters","this","shuffledCharacterArr","includes","setState","setTimeout","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d1337c81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beth.4d5e65a0.png\";","module.exports = __webpack_public_path__ + \"static/media/birdperson.612ba8d4.png\";","module.exports = __webpack_public_path__ + \"static/media/evilmorty.0657e1f4.png\";","module.exports = __webpack_public_path__ + \"static/media/gianthead.978b3847.png\";","module.exports = __webpack_public_path__ + \"static/media/goldenford.3774b39d.png\";","module.exports = __webpack_public_path__ + \"static/media/jerry.af8e8a84.png\";","module.exports = __webpack_public_path__ + \"static/media/jessica.a9644830.png\";","module.exports = __webpack_public_path__ + \"static/media/meeseeks.9667b7ee.png\";","module.exports = __webpack_public_path__ + \"static/media/morty.244deeda.png\";","module.exports = __webpack_public_path__ + \"static/media/mr.d61b2d5b.png\";","module.exports = __webpack_public_path__ + \"static/media/rick.06b65841.png\";","module.exports = __webpack_public_path__ + \"static/media/summer.afdbb7bf.png\";","import React from \"react\";\nimport \"./style.css\";\n\nconst Navbar = props => (\n  <div className=\"navbar\">\n    <div>Clicky Game</div>\n    <div className={props.navMsgColor}>{props.navMsg}</div>\n    <div>Score: {props.score} <span className=\"pipe\">|</span> High Score: {props.highscore}</div>\n  </div>\n);\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nconst Jumbotron = props => (\n  <div className=\"jumbotron text-center d-flex align-items-center justify-content-center\">\n    <p className=\"m-0\">Click on an image to earn points, but don't click on any more than once!</p>\n  </div>\n);\n\nexport default Jumbotron","import React from \"react\";\nimport \"./style.css\";\n\n// the onClick function is defined as a callback so that the clicked elements value\n// can be passed to props.clickEvent to check if the image has been clicked or not\nconst Character = props => (\n  <div className=\"card\" onClick={e => props.clickEvt(e.target.src)}>\n    <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\n  </div>\n);\n\nexport default Character;","import React from \"react\";\nimport \"./style.css\";\nimport Character from \"../character\";  // Q: Is it okay to refer the directory instead of the actual file?\n\nconst Container = props => (\n  <div className={\n    props.shake? \n    \"container d-flex flex-wrap justify-content-center shake\" : \"container d-flex flex-wrap justify-content-center\"\n  }>\n    {/* props.character is given value in App.js render function */}\n    {props.characters.map((a, i) => <Character name={a} key={i} clickEvt={props.clickEvt} />)}\n  </div>\n)\n\nexport default Container;","import React from \"react\";\nimport \"./style.css\";\n\nconst Footer = () => <div className=\"footer text-center\">React-Clicky-Game</div>;\n\nexport default Footer;","import beth from \"../images/beth.png\";\nimport birdperson from \"../images/birdperson.png\";\nimport evilmorty from \"../images/evilmorty.png\";\nimport gianthead from \"../images/gianthead.png\";\nimport goldenford from \"../images/goldenford.png\";\nimport jerry from \"../images/jerry.png\";\nimport jessica from \"../images/jessica.png\";\nimport meeseeks from \"../images/meeseeks.png\";\nimport morty from \"../images/morty.png\";\nimport mr from \"../images/mr.png\";\nimport rick from \"../images/rick.png\";\nimport summer from \"../images/summer.png\";\n\nconst images = [\n  beth,\n  birdperson,\n  evilmorty,\n  gianthead,\n  goldenford,\n  jerry,\n  jessica,\n  meeseeks,\n  morty,\n  mr,\n  rick,\n  summer\n];\n\nexport default images;","import React, { Component } from \"react\";\nimport Navbar from \"./components/navbar\";\nimport Wrapper from \"./components/wrapper\";\nimport Jumbotron from \"./components/jumbotron\";\nimport Container from \"./components/container\";\nimport Footer from \"./components/footer\";\nimport images from \"./assets/javascript/images\";\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n    highscore: 0,\n    navMsg: \"Click an image to start the game!\",\n    navMsgColor: '',\n    allCharacters: this.randomArray(),\n    clickedCharacters: [],\n    shake: false\n  }\n\n\n  // binds the current this context to clickCheck() to have access to the current state\n  // when passed down to the Character component\n  clickEvt = this.clickCheck.bind(this);\n\n  randomArray() {\n    // make new copy of images array\n    const newCharacterArray = images.slice();\n    // stores random (shuffled) image array\n    const randomArr = [];\n\n    while (newCharacterArray.length > 0) {\n      randomArr.push(newCharacterArray.splice(Math.floor(Math.random() * newCharacterArray.length), 1)[0]);\n    }\n\n    return randomArr;\n  }\n\n  clickCheck(clickedElem) {\n    // copy clickedCharacter array as a new prevState array\n    // to modify it by value, and not by reference. clickedCharacters stores all previous clicked images\n    const prevClickedCharacters = this.state.clickedCharacters.slice();\n\n    // shuffles the Character Image Array\n    const shuffledCharacterArr = this.randomArray();\n\n    // tracks score\n    let score = this.state.score;\n    let highscore = this.state.highscore;\n\n    // if the clicked element is not in clickedCharacters, then it hasn't been clicked and the score is increased\n    if (!this.state.clickedCharacters.includes(clickedElem)) {\n      // if score and highScore are the same, then there is a new highScore value\n      if (score === highscore) {\n        score++;\n        highscore++;\n\n        // if they are not equal, then only increase the score value\n      } else {\n        score++;\n      }\n\n      // adds the clicked element to clickedCharacters to track that it has been clicked\n      prevClickedCharacters.push(clickedElem);\n    }\n\n    // resets the current score if the same element was clicked twice\n    if (this.state.clickedCharacters.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highscore: highscore,\n        navMsg: 'Incorrect guess!',\n        navMsgColor: 'incorrect',\n        allCharacters: shuffledCharacterArr,\n        clickedCharacters: [],\n        shake: true\n      });\n    }\n\n    // if this runs, then the same element has not been clicked twice and the score is increased\n    this.setState({\n      score: score,\n      highscore: highscore,\n      navMsg: 'You Guessed Correctly!',\n      navMsgColor: 'correct',\n      allCharacters: shuffledCharacterArr,\n      clickedCharacters: prevClickedCharacters,\n      shake: false\n    });\n\n    // removes the green correct indicator on a successful click after .5s to re-render the class on each success\n    return setTimeout(() => this.setState({ navMsgColor: '' }), 500);\n  }\n\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          score={this.state.score}\n          highscore={this.state.highscore}\n          navMsg={this.state.navMsg}\n          navMsgColor={this.state.navMsgColor}\n        />\n        <Jumbotron />\n        <Container \n          shake={this.state.shake}\n          characters={this.state.allCharacters}\n          clickEvt={this.clickEvt}\n        />\n        <Footer />\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}